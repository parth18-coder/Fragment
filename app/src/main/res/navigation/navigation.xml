<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/navigation"
    app:startDestination="@id/titleFragment">

    <fragment
        android:id="@+id/titleFragment"
        android:name="com.example.fragment.TitleFragment"
        android:label="TitleFragment" >
        <action
            android:id="@+id/action_titleFragment_to_gameFragment"
            app:destination="@id/gameFragment" />
    </fragment>
    <fragment
        android:id="@+id/gameFragment"
        android:name="com.example.fragment.GameFragment"
        android:label="GameFragment" >
        <action
            android:id="@+id/action_gameFragment_to_gameOverFragment2"
            app:destination="@id/gameOverFragment2"
            app:popUpTo="@id/gameFragment"
            app:popUpToInclusive="true">

            <!--

            app:popUpTo="@id/gameFragment"


            up until now, we have been letting nav controller handle the back stack for us i.e.
            when we navigate to the destination, it automatically adding each destination to our back stack.
            so, when we tap back button from gameOverFragment or gameWinFragment we end up in a game fragment.
            but this is not right because when game is over, on clicking back button we should go to the first page of
            the app i.e title screen.

            now,navigation action can manipulate the back stack as it move to the next destination. so we make both actions
            that navigate us from the game fragment to gameOverFragment and game fragment to gameWinFragment, to pop the
            game fragment from the back stack before pushing gameOverFragment or gameWinFragment to the back stack.

            so for this we will use the "popUpTo" attribute of the action, this tell the navigation component to pop
            the fragments until it find the game fragment.
            -->

            <!--

            app:popUpToInclusive="true"

            we use inclusive flag so that gameFragment also get pop
            -->
    </action>

        <action
            android:id="@+id/action_gameFragment_to_gameWonFragment"
            app:destination="@id/gameWonFragment"
            app:popUpTo="@id/gameFragment"
            app:popUpToInclusive="true" />
    </fragment>
    <fragment
        android:id="@+id/gameOverFragment2"
        android:name="com.example.fragment.GameOverFragment"
        android:label="GameOverFragment" >
        <action
            android:id="@+id/action_gameOverFragment2_to_gameFragment"
            app:destination="@id/gameFragment"
            app:popUpTo="@id/titleFragment" />
    </fragment>
    <fragment
        android:id="@+id/gameWonFragment"
        android:name="com.example.fragment.GameWonFragment"
        android:label="GameWonFragment" >
        <action
            android:id="@+id/action_gameWonFragment_to_gameFragment"
            app:destination="@id/gameFragment"
            app:popUpTo="@id/titleFragment" />
        <argument
            android:name="numQuestion"
            app:argType="integer" />
        <argument
            android:name="numCorrect"
            app:argType="integer" />
    </fragment>
    <fragment
        android:id="@+id/aboutFragment"
        android:name="com.example.fragment.AboutFragment"
        android:label="fragment_about"
        tools:layout="@layout/fragment_about" />
    <fragment
        android:id="@+id/rulesFragment"
        android:name="com.example.fragment.RulesFragment"
        android:label="fragment_rules"
        tools:layout="@layout/fragment_rules" />
</navigation>